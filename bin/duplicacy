#!/bin/bash
#
# Wraps duplicacy backup with auto downloading and updating functionality
#
# Scott Edlund <sedlund@protonmail.com>
# v0.5

# Uncomment for debugging
#DEBUG=1
#set -x
#export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# Constants
#
# Where you want duplicacy to reside
readonly DIR=~/bin
# Time in seconds to wait between version checks
readonly CHECK_INTERVAL="$((60*60*24*7))"
readonly UPDATE_CHECK_FILE="/tmp/.duplicacy_check_${USER}.tmp"
readonly TIME="$(date +%s)"
readonly GOBIN="${DIR}/duplicacy.bin"
readonly GITHUB_URL='https://github.com'
readonly LATEST_RELEASE='gilbertchen/duplicacy/releases/latest'

# Functions
err() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2
}

update_check_file() {

  local next_check_time=$(( TIME + CHECK_INTERVAL ))
  if ! echo ${next_check_time} > "${UPDATE_CHECK_FILE}" ; then
    err "Could not update ${UPDATE_CHECK_FILE} with new check interval."
    exit 1
  else
    echo "Updated check file successfully."
  fi

}

download() {

  if ! UNAME_M="$(uname -m)" ; then
    err "Unable to exec uname -m"
    exit 1
  fi
  readonly UNAME_M

  case "${UNAME_M}" in
    x86_64) ARCH=x64 ;;
    386)    ARCH=i386 ;;
    arm*)   ARCH=arm ;;
  esac
  readonly ARCH

  if ! UNAME="$(uname)" ; then
    err "Unable to exec uname."
    exit 1
  fi
  readonly UNAME

  case "${UNAME}" in
    FreeBSD)  OS='freebsd' ;;
    Linux)    OS='linux' ;;
    Darwin)   OS='osx' ;;
    *MINGW* | *WIN32* | *CYGWIN*) OS='win' ;;
  esac

  if [[ -n "${DEBUG}" ]]; then
    echo "wget -qO- ${GITHUB_URL}/${LATEST_RELEASE} \
      | awk -F '\"' -v a=${OS}_${ARCH} '\$0~a{print \$2;exit}'"
  fi

  local return_codes
  DUPLICACY_PATH="$(wget -qO- ${GITHUB_URL}/${LATEST_RELEASE} \
    | awk -F '"' -v a=${OS}_${ARCH} '$0~a{print $2;exit}')"
  return_codes=( "${PIPESTATUS[*]}" )
  readonly DUPLICACY_PATH

  if [[ "${return_codes[0]}" -ne 0 ]]; then
    err "Error issuing wget on ${GITHUB_URL}/${LATEST_RELEASE}"
    exit 1
  fi
  if [[ "${return_codes[1]}" -ne 0 ]]; then
    err "Error running awk on release html output."
    exit 1
  fi

  echo "Downloading Duplicacy..."

  if [[ "${DEBUG}" ]]; then
    echo "wget -q --show-progress -O ${GOBIN} ${GITHUB_URL}/${DUPLICACY_PATH}"
  fi

  if ! wget -q --show-progress -O "${GOBIN}" \
    "${GITHUB_URL}/${DUPLICACY_PATH}" ; then
    err "Error downloading ${GITHUB_URL}/${DUPLICACY_PATH} to ${GOBIN}"
    exit 1
  fi

  if ! chmod +x ${GOBIN}; then
    err "Error setting permissions on ${GOBIN}"
    exit 1
  fi

  update_check_file

}

check_for_update() {

  echo "Checking for updates..."

  local return_codes
  local current_version
  current_version="v$( ${GOBIN} | grep -A1 VERSION | tail -1 \
    | awk '{print $1}' )"
  return_codes=( "${PIPESTATUS[*]}" )

  if [[ "${return_codes[0]}" -ne 0 ]]; then
    err "Error running ${GOBIN}"
  fi
  if [[ "${return_codes[1]}" -ne 0 ]]; then
    err "Error running grep"
  fi
  if [[ "${return_codes[2]}" -ne 0 ]]; then
    err "Error running awk"
  fi

  local latest_version
  latest_version=$(wget -qO- "${GITHUB_URL}/${LATEST_RELEASE}" \
    | awk -F "/" -v v=releases/download '$0~v{print $6;exit}')
  return_codes=( "${PIPESTATUS[*]}" )

  if [[ "${return_codes[0]}" -ne 0 ]]; then
    err "Error running wget on ${GITHUB_URL}/${LATEST_RELEASE}"
  fi
  if [[ "${return_codes[1]}" -ne 0 ]]; then
    err "Error running awk on output from ${GITHUB_URL}/${LATEST_RELEASE}"
  fi

  if [[ "${latest_version}" != "${current_version}" ]]; then
    echo "Updated release of Duplicacy found..."
    download
  else
    echo "Current version is latest..."
    update_check_file
  fi

}

# MAIN
main() {

  if [[ ! -e "${GOBIN}" ]]; then
      download
  fi

  if [[ -e "${UPDATE_CHECK_FILE}" ]]; then
    file_check_time="$(<$"{UPDATE_CHECK_FILE}")"
    local file_check_time

    if [[ "${TIME}" -gt "${file_check_time}" ]]; then
      check_for_update
    fi
  else
    err "Missing the UPDATE_CHECK_FILE.  If this happens repeatedly, try \
changing the storage path."
    check_for_update
  fi

  "${GOBIN}" "$@"

  exit 0

}

main "$@"
